criar um grafo 

um grafo é um objeto que contém um array de vértices e arestas, e um booleano de direcionado, quando é criado, um objeto é instanciado,
 o vertice é um objeto com dois atributos de peso e de rótulo, 
e um array de arestas, onde acessamos as arestas adjacentes a ele, já uma aresta, possui rótulo, peso e um array 
contendo dois vértices, sendo eles inicial e final, para adicionar um vértice instanciamos um objeto desta classe, 
e o inserimos no array de vértices do grafo, para adicionar arestas é a mesma coisa, o objeto é instanciado e 
inserido no vetor de arestas do obj grafo, nesse caso, também no vetor de arestas dos dois vértices adjacentes.


remover vértice

 para removermos um vértice, o método recebe o vértice desejado como argumento, verifica se ele está inserido no vetor de vértices do grafo, é primeiro, 
 um for é executado durante todo array de arestas desse vértice, e estas arestas são removidas do grafo, 
 e depois o vertice é excluído (cada aresta do vértice é passada como argumento pró método remover aresta() do grafo.


remover aresta

o método verifica se a aresta existe no vetor de arestas do grafo, e se sim, é passada como argumento pró método removerAresta(), e 
após isso, a aresta em questão é removida do array de arestas dos dois vértices pertencentes a mesma


checar adjacencia de vertices

o método checar adjacencia vertices() recebe dois vértices como argumento, 
e verifica a partir de uma iteração em seu vetor de arestas, se alguma possui estes dois vértices relacionados


checar adjacência de arestas

o método checar adjacência arestas() possui 2 argumentos arestas que desejam ser verificadas, 
este método cria dois conjuntos utilizando o set(), contendo os vértices da aresta a  e da aresta b, 
a interseção entre estes conjuntos é verificada, e assim respondendo a pergunta inicial


alterar vértice e arestas

este método realiza a alteração de dados do vértice, recebendo como argumento o rótulo e o peso do mesmo como argumento,
 estes dados são inseridos diretamente nos atributos do objeto, já a alteração de arestas ocorre da
  mesma forma (nota que se deseja alterar os vértices de uma aresta, a mesma deve ser excluída e criada novamente)




checar arestas 

este método primeiro verifica o tamanho do array de arestas do grafo, se ele for 0,
 uma resposta de arestas vazia é enviada, se não, o objeto retorna o conjunto de arestas do grafo


verificar arestas

Esse método utiliza o atributo len dos arrays de vértices e arestas do grafo,
 concatenando o mesmo a uma string que informa o número total de vértices e arestas do mesmo.

checar grafo

este método verifica se o grafo é vazio ou completo, primeiramente ele verifica o 
tamanho do vetor de vértices, se o mesmo for zero, uma confirmação de grafo vazio é enviada, se não,
 o método cria uma variável chamada conexões, e itera sobre as arestas do grafo, se o vértice atual 
for o primeiro da aresta, ele adciona o segundo, e vice versa, e no final, criando um vetor com todos 
os vértices adjacentes ao vértice atual, e ao final da iteração, o tamanho deste vetor é comparado com o tsamanho do
 vetor de vértices do grafo - 1, se for diferente, é retornado que o grafo não é completo.  (ou seja, o método, pra 
 cada vértice do grafo, cria um vetor possuindo seus vizinhos, e compara com o tamanho do vetor de df , ,:-_*“&$#vértices do grafo original)

checar articulação

este método verifica os pontos de articulação, ou seja, vértices que se removidos, aumentam o número de
componentes conexos, primeiro ele implementa uma busca em profundidade, que recebe o vértice atual e um
array de vértices visitados, este método, utiliza o outro método chamado buscar_vizinhos(), do vértice atual, que 
retorna um array de vizinhos deste vértice, e o primeiro vértice iterado que não estiver no vetor de visitados, o mesmo é inserido em uma chamada recursiva do DFS

para calcular os componentes, o método possui um método interno, que utiliza a busca DFS implementada anteriormente, 
inicialmente, o array de vértices do grafo é iterado, e pra cada vértice que não está presente no array de vizinhos, 
é executada uma DFS, e para cada DFS executada, um contador é incrementado em mais um, este contador representa os componentes do grafo. Este método descrito, retorna o número de componentes

Em seguida, o array de vértices é novamente iterado, e a cada iteração, o array atual e suas arestas incidentes
são removidos, e em seguida, o método de buscar componentes é chamado ao grafo após a remoção, e depois o número de
componentes encontrado é comparado com o número original de componentes, se for maior , o rótulo do vértice é inserido
--no vetor de articulações previamente inicializado. (a cada iteração de vértice, o vértice atual é removido, e calculado o número de componentes, se for maior que o número original, o vértice é uma articulação)




obter vizinhos

este método recebe um vértice como argumento, e itera sobre o vetor de arestas, se uma aresta possuir o vértice indicado 
como vértice inicial OU final, o outro vértice é inserido no vetor de vizinhos, que é retornado.

obter matriz de adjacência ND

para obter uma matriz de adjacência, primeiro, o vetor de v é iterado, a cada vértice atual, o vetor de v é iterado
 novamente, se os dois vértices atuais das iterações foram iguais, é inserido 0 num vetor de vetores previamente definido,
  se não forem, é verificado as arestas do grafo atraves de um for no vetor de a, se o segundo vértice estiver presente em alguma a
  resta junto com o primeiro, é inserido 1, se não, é inserido 0 (este método retorna um vetor, onde cada vértice possui seu vetor de 1 ou 0s)

obter matriz de adjacência D

A mesma coisa, só que na parte de verificação de arestas, só é inserido um, se o segundo vértice atual estiver na posição 1, e o primeiro vértice atual, na 0, de vértices da aresta encontrada.

obter matriz incidência ND

é criado inicialmente um vetor chamado matrizInc, em seguida, o vetor de vértices é iterado, e a cada iteração, o vetor de arestas 
também é iterado, se a aresta atual possuir o vértice atual, é inserido 1, se não, é inserido 0, e no final da iteração, a linha é adicionada ao vetor da matriz criado previamente

obter matriz incidência ND

mesma coisa que o anterior, so que se o vértice atual tiver na aresta atual, e estiver na posição 0 do vetor de vértices,
 é inserido -1, se estiver na posição 1, é inserido 1, e se ele não estiver constando na aresta, é inserido 0

conectividade ND


este método toma o vértice 0 do vetor de vértices do grafo como base, e apartir dele, verifica seus vértices alcançáveis, 
primeiramente, ele faz uma iteração no vetor de arestas, se esta aresta atual, possuir o vértice de referência, ele insere o outro vértice no vetor de alcançáveis

após isso, outra iteração é feita, cada vértice do vetor de alcançaveis é verificado seus vizinhos, e se existir algum vizinho 
que não esta np vetor de alcançaveis, ele é adicionado ao mesmo, para evitar loops, um contador foi adicionado, e ele não pode ser maior que o tamanho do vetor de alcançaveis.

após isso, o primeiro vértice de referencia é adicionado ao vetor de alcançaveis, e o mesmo é iterado, e a cada iteração 
 vetor de alcançaveis, é iterado o vetor de vértices original, e se existir algum vértice do grafo og que não esta nos alcançaveis, é retornado a afirmação de grafo desconexo.

conectividade naive

neste método, o usuário irá remover uma aresta escolhida, e então, será verificado se o grafo ainda continua conexo
, primeiramente, o usuário escolhe a aresta, a mesma é removida do grafo, depois o mesmo tem sua conectividade testada pelos 
métodos utilizados. em seguida o usuário tem a opção de restaurar a aresta escolhida. este método serve para encontrar pontes, onde uma aresta que é removida e acaba com a conectividade do grafo, é uma aresta ponte)

fortemente conexo

este método verifica se um grafo D é fortemente conexo, primeiro, o array de vértices é iterado, e a cada iteração, uma dfs 
é executada, esta dfs utiliza uma pilha, que contem os vértices do grafo, e para cada vértice, é checado seus vizinhos, e s
e ele não tiver no array de visitados, ele é adicionado (depois da checagem ele é removido da pila), se o vizinho nçao estiver inserido nos visitados,
 ele é inserido na pilha para poder ser iterado. Apos isso, o tamanho do array de vértices visitados é comparado com o tamanho do array de v original, se forem iguais, o grafo é fortemente conexo.

semi fortemente conexo

primeiro, o grafo original D é convertido a um grafo ND, com um método especifico, onde este método cria um grafo nd novo,
 e adiciona os vértices e arestas do grafo original ao seus vetores, e apos essa transformação, a dfs é executada no mesmo, 
 sendo assim, se ele for conexo, a resposta retornada é positiva.

# Comentários sobre funções do sistema

## Funções de Grafo

### gerar_csv
Essa função serve para gerar um grafo atual em CSV, principalmente para ser consumido pelo programa GEPHI, que aceita matrizes de adjacência nestes arquivos. Este método recebe o nome do arquivo a ser criado e um booleano indicando se o mesmo é direcionado ou não. Primeiro, o programa verifica se o grafo é direcionado. Se não for, ele cria o arquivo indicado, utilizando o método “w” que indica que dados serão escritos no mesmo. Primeiramente, será iterado o vetor de vértices do grafo, tendo cada rótulo sendo escrito na primeira linha e separados por “;”.

Em seguida, o método de criar matriz de adjacência em grafo não direcionado é chamado (se o grafo for direcionado, a matriz de adjacência direcionada é chamada no lugar), sendo assim, possuindo a matriz de adjacência ao grafo indicado. Em seguida, o vetor de vértices é iterado novamente (cada iteração é uma linha), e a cada iteração, a matriz de adjacência é iterada (os índices das duas iterações estão sendo armazenados). Primeiramente, o rótulo do vértice atual + “;” é escrito no arquivo, em seguida, os valores da linha na matriz de adjacência são escritos, separados por “;”. Ao final da iteração, é adicionado um “;” para indicar a quebra de linha.

### ler_grafo_from_csv
Este método é responsável por ler um grafo a partir de um arquivo CSV, utilizando a matriz de adjacência. Primeiramente, o código abre o arquivo indicado pelo nome passado como parâmetro em “r”, indicando leitura. Em seguida, a primeira linha é salva, ela contém os vértices do grafo. Esta linha é tratada, onde os “;” são removidos, e assim é transformada num vetor de rótulos de vértices. Em seguida, este array é iterado, e cada vértice é adicionado ao grafo com peso 0 (padrão). A mesma coisa é feita com as linhas seguintes, onde os valores são lidos, tratados, e transformados em um array de arrays de valores das arestas. Em seguida, uma iteração dupla é realizada no vetor de vértices lidos, os índices de cada iteração são armazenados, e em seguida a aresta correspondente a eles é verificada. Se o valor dela for 0, a iteração vai para a próxima, mas se for 1, uma aresta utilizando os dois vértices atuais é criada.

Este método, em grafos direcionados, pode dar problema, pois como a matriz de adjacência indica apenas como 1 o vértice sucessor, o grafo resultante dessa exportação é um multigrafo, com arestas de ida e volta. Para evitar, são realizadas duas iterações no vetor de arestas, e ao encontrar arestas de ida e volta (vértice inicial na aresta 1 é o vértice final na aresta 2 e vice-versa), a aresta b é deletada, acabando com o bug do multigrafo gerado a partir de CSV de grafo direcionado.

### criarGrafo
Esta função cria um grafo aleatório baseado no número de vértices. Ela utiliza a biblioteca `random` para selecionar vértices e criar arestas entre eles, garantindo que não haja loops ou arestas duplicadas. O tempo de execução para gerar o grafo é medido e exibido no console.

### salvar_grafo_json
Esta função salva o grafo atual em um arquivo JSON. Ela cria um dicionário com os vértices e arestas do grafo, incluindo seus rótulos e pesos, e escreve esse dicionário em um arquivo JSON com o nome especificado.

### carregar_grafo_json
Esta função carrega um grafo a partir de um arquivo JSON. Ela lê o arquivo JSON, cria uma instância de `Grafo` e adiciona os vértices e arestas conforme especificado no arquivo. Em caso de erro, mensagens apropriadas são exibidas no console.

### ajustar_grafo_grau_2
Esta função ajusta um grafo para que todos os vértices tenham grau 2, conectando vértices sequencialmente (1 com 2, 2 com 3, ...). Se o grafo tiver mais de dois vértices, o último vértice é conectado ao primeiro para formar um ciclo.

### executar_fleury
Esta função executa o algoritmo de Fleury em um grafo e salva o resultado em um arquivo com nome incremental. Ela verifica se o grafo é não direcionado e se está carregado antes de executar o algoritmo. O tempo de execução é medido e o resultado é salvo em um arquivo de texto.

### executar_fleury_tarjan
Esta função executa o algoritmo de Fleury usando Tarjan para detectar pontes e salva o resultado em um arquivo. Ela verifica se o grafo está carregado antes de executar o algoritmo. O tempo de execução é medido e o resultado é salvo em um arquivo de texto.

### checar_adjacencia_vertices
Esta função verifica se dois vértices são adjacentes em um grafo. Ela lista os vértices do grafo e solicita ao usuário que insira os índices dos vértices a serem verificados. O resultado é exibido no console.

### checar_adjacencia_arestas
Esta função verifica se duas arestas são adjacentes em um grafo. Ela lista as arestas do grafo e solicita ao usuário que insira os índices das arestas a serem verificadas. O resultado é exibido no console.

### deletar_vertice_do_grafo
Esta função deleta um vértice do grafo. Ela lista os vértices do grafo e solicita ao usuário que insira o índice do vértice a ser deletado. O vértice e suas arestas são removidos do grafo.

### deletar_aresta_do_grafo
Esta função deleta uma aresta do grafo. Ela lista as arestas do grafo e solicita ao usuário que insira o índice da aresta a ser deletada. A aresta é removida do grafo.

### alterar_vertice_do_grafo
Esta função altera um vértice do grafo. Ela lista os vértices do grafo e solicita ao usuário que insira o índice do vértice a ser alterado, o novo rótulo e o novo peso. O vértice é atualizado com os novos valores.

### alterar_aresta_do_grafo
Esta função altera uma aresta do grafo. Ela lista as arestas do grafo e solicita ao usuário que insira o índice da aresta a ser alterada, o novo rótulo e o novo peso. A aresta é atualizada com os novos valores.

### adicionar_vertice_ao_grafo
Esta função adiciona um vértice ao grafo. Ela solicita ao usuário que insira o rótulo e o peso do vértice. O vértice é adicionado ao grafo.

### adicionar_aresta_ao_grafo
Esta função adiciona uma aresta ao grafo. Ela solicita ao usuário que insira os índices dos vértices a serem conectados pela aresta e o rótulo e peso da aresta. A aresta é adicionada ao grafo.

### verificar_conectividade
Esta função verifica a conectividade do grafo. Ela exibe se o grafo é conectado ou não.

### verificar_conectividade_naive
Esta função verifica a conectividade do grafo usando um método ingênuo. Ela exibe se o grafo é conectado ou não.

### exibir_lista_adjacencia
Esta função exibe a lista de adjacência do grafo, considerando se ele é direcionado ou não.

### verificar_componentes_fortemente_conexos
Esta função verifica os componentes fortemente conexos do grafo usando o algoritmo de Kosaraju. Ela exibe os componentes fortemente conexos no console.

### exibir_matriz_adj
Esta função exibe o grafo em forma de matriz de adjacência. Ela considera se o grafo é direcionado ou não.

### exibir_matriz_inci
Esta função exibe a matriz de incidência do grafo.

### checar_articulacoes
Esta função verifica a existência de articulações no grafo. Ela exibe as articulações encontradas no console.

### grafo_vazio_completo
Esta função exibe se o grafo está vazio ou completo. Ela exibe o rótulo de cada vértice para uma visualização mais clara.

### checar_existencia_arestas
Esta função verifica a existência de arestas no grafo. Ela exibe as arestas encontradas no console.

### checar_vertices_arestas
Esta função verifica a existência de vértices e arestas no grafo. Ela exibe os vértices e arestas encontrados no console.

### mostrar_menu
Esta função exibe o menu de opções para o usuário. Ela solicita ao usuário que escolha uma opção e retorna a opção escolhida.

### criar_vertices_iniciais
Esta função cria os vértices iniciais do grafo. Ela solicita ao usuário que insira os rótulos e pesos dos vértices.

### main
Esta é a função principal do programa. Ela exibe o menu de opções e executa as funções correspondentes com base na escolha do usuário.

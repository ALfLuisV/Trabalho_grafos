[
    {
        "label": "Grafo",
        "importPath": "grafo",
        "description": "grafo",
        "isExtraImport": true,
        "detail": "grafo",
        "documentation": {}
    },
    {
        "label": "Grafo",
        "importPath": "grafo",
        "description": "grafo",
        "isExtraImport": true,
        "detail": "grafo",
        "documentation": {}
    },
    {
        "label": "adicionar_arestas_aleatorias",
        "importPath": "grafo",
        "description": "grafo",
        "isExtraImport": true,
        "detail": "grafo",
        "documentation": {}
    },
    {
        "label": "encontrar_pontes_naive",
        "importPath": "grafo",
        "description": "grafo",
        "isExtraImport": true,
        "detail": "grafo",
        "documentation": {}
    },
    {
        "label": "Vertice",
        "importPath": "vertice",
        "description": "vertice",
        "isExtraImport": true,
        "detail": "vertice",
        "documentation": {}
    },
    {
        "label": "Vertice",
        "importPath": "vertice",
        "description": "vertice",
        "isExtraImport": true,
        "detail": "vertice",
        "documentation": {}
    },
    {
        "label": "listar_vertices",
        "importPath": "vertice",
        "description": "vertice",
        "isExtraImport": true,
        "detail": "vertice",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Aresta",
        "importPath": "aresta",
        "description": "aresta",
        "isExtraImport": true,
        "detail": "aresta",
        "documentation": {}
    },
    {
        "label": "listar_arestas",
        "importPath": "aresta",
        "description": "aresta",
        "isExtraImport": true,
        "detail": "aresta",
        "documentation": {}
    },
    {
        "label": "listar_arestas",
        "importPath": "aresta",
        "description": "aresta",
        "isExtraImport": true,
        "detail": "aresta",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "kosaraju",
        "importPath": "algoritmo",
        "description": "algoritmo",
        "isExtraImport": true,
        "detail": "algoritmo",
        "documentation": {}
    },
    {
        "label": "fleury",
        "importPath": "algoritmo",
        "description": "algoritmo",
        "isExtraImport": true,
        "detail": "algoritmo",
        "documentation": {}
    },
    {
        "label": "fleury_com_tarjan",
        "importPath": "algoritmo",
        "description": "algoritmo",
        "isExtraImport": true,
        "detail": "algoritmo",
        "documentation": {}
    },
    {
        "label": "encontrar_pontes_tarjan",
        "importPath": "algoritmo",
        "description": "algoritmo",
        "isExtraImport": true,
        "detail": "algoritmo",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "kosaraju",
        "kind": 2,
        "importPath": "Codigo.algoritmo",
        "description": "Codigo.algoritmo",
        "peekOfCode": "def kosaraju(grafo: Grafo):\n    # 1º Passo: Realizar uma DFS e salvar os tempos de término\n    tempos_termino = []\n    visitados = set()\n    def dfs1(vertice, tempo):\n        visitados.add(vertice.rotulo)\n        for aresta in vertice.arestas:\n            if aresta.vertices[0] == vertice:\n                prox_vertice = aresta.vertices[1]\n                if prox_vertice.rotulo not in visitados:",
        "detail": "Codigo.algoritmo",
        "documentation": {}
    },
    {
        "label": "fleury",
        "kind": 2,
        "importPath": "Codigo.algoritmo",
        "description": "Codigo.algoritmo",
        "peekOfCode": "def fleury(grafo):\n    \"\"\"\n    Implementação do algoritmo de Fleury para encontrar um caminho euleriano.\n    \"\"\"\n    if not grafo._verificar_conectividade_simples():\n        return \"O grafo não é conexo! Não é possível encontrar um caminho euleriano.\"\n    vertices_grau_impar = [v for v in grafo.vertices if len(v.arestas) % 2 != 0]\n    if len(vertices_grau_impar) > 2:\n        return \"O grafo possui mais de 2 vértices de grau ímpar. Não é euleriano.\"\n    # Criar uma cópia do grafo para manipulação",
        "detail": "Codigo.algoritmo",
        "documentation": {}
    },
    {
        "label": "e_ponte",
        "kind": 2,
        "importPath": "Codigo.algoritmo",
        "description": "Codigo.algoritmo",
        "peekOfCode": "def e_ponte(grafo, aresta):\n    \"\"\"\n    Verifica se uma aresta é uma ponte (se sua remoção desconecta o grafo).\n    Parâmetros:\n        grafo: Instância de Grafo.\n        aresta: Instância de Aresta.\n    Retorno:\n        True se for ponte, False caso contrário.\n    \"\"\"\n    # Encontrar o índice da aresta no grafo",
        "detail": "Codigo.algoritmo",
        "documentation": {}
    },
    {
        "label": "encontrar_pontes_tarjan",
        "kind": 2,
        "importPath": "Codigo.algoritmo",
        "description": "Codigo.algoritmo",
        "peekOfCode": "def encontrar_pontes_tarjan(grafo):\n    \"\"\"\n    Encontra todas as pontes em um grafo usando o algoritmo de Tarjan (versão iterativa).\n    :param grafo: Instância de Grafo.\n    :return: Lista de tuplas representando as pontes (v1, v2).\n    \"\"\"\n    tempo = [0]\n    ids = {}\n    lows = {}\n    visitados = set()",
        "detail": "Codigo.algoritmo",
        "documentation": {}
    },
    {
        "label": "fleury_com_tarjan",
        "kind": 2,
        "importPath": "Codigo.algoritmo",
        "description": "Codigo.algoritmo",
        "peekOfCode": "def fleury_com_tarjan(grafo):\n    \"\"\"\n    Implementação do algoritmo de Fleury usando Tarjan para detectar pontes.\n    :param grafo: Instância de Grafo.\n    :return: Lista com o caminho Euleriano ou mensagem de erro.\n    \"\"\"\n    if not grafo._verificar_conectividade_simples():\n        return \"O grafo não é conexo! Não é possível encontrar um caminho Euleriano.\"\n    vertices_grau_impar = [v for v in grafo.vertices if len(v.arestas) % 2 != 0]\n    if len(vertices_grau_impar) > 2:",
        "detail": "Codigo.algoritmo",
        "documentation": {}
    },
    {
        "label": "Aresta",
        "kind": 6,
        "importPath": "Codigo.aresta",
        "description": "Codigo.aresta",
        "peekOfCode": "class Aresta:\n    def __init__(self, rotulo: str, peso: int, vertice1: Vertice, vertice2: Vertice):\n        self.rotulo = rotulo      # Identificador da aresta (rótulo)\n        self.peso = peso          # Peso da aresta\n        self.vertices = (vertice1, vertice2)  # Aresta conecta dois vértices\n    def __str__(self):\n        return f\"Aresta {self.rotulo}: de {self.vertices[0].rotulo} para {self.vertices[1].rotulo} com peso {self.peso}\"\n    def __repr__(self):\n        return self.__str__()\ndef listar_arestas(arestas):",
        "detail": "Codigo.aresta",
        "documentation": {}
    },
    {
        "label": "listar_arestas",
        "kind": 2,
        "importPath": "Codigo.aresta",
        "description": "Codigo.aresta",
        "peekOfCode": "def listar_arestas(arestas):\n    \"\"\"Função para exibir todas as arestas disponíveis com índices.\"\"\"\n    for i, aresta in enumerate(arestas):\n        print(f\"{i}: {aresta}\")\ndef alterar_aresta(arestas):\n    \"\"\"Permite alterar o rótulo e o peso de uma aresta selecionada.\"\"\"\n    listar_arestas(arestas)\n    try:\n        idx = int(input(\"Digite o índice da aresta que deseja alterar: \"))\n        aresta = arestas[idx]",
        "detail": "Codigo.aresta",
        "documentation": {}
    },
    {
        "label": "alterar_aresta",
        "kind": 2,
        "importPath": "Codigo.aresta",
        "description": "Codigo.aresta",
        "peekOfCode": "def alterar_aresta(arestas):\n    \"\"\"Permite alterar o rótulo e o peso de uma aresta selecionada.\"\"\"\n    listar_arestas(arestas)\n    try:\n        idx = int(input(\"Digite o índice da aresta que deseja alterar: \"))\n        aresta = arestas[idx]\n        novo_rotulo = input(f\"Novo rótulo para a aresta {aresta.rotulo} (deixe vazio para manter): \")\n        if novo_rotulo:\n            aresta.rotulo = novo_rotulo\n        novo_peso = input(f\"Novo peso para a aresta {aresta.peso} (deixe vazio para manter): \")",
        "detail": "Codigo.aresta",
        "documentation": {}
    },
    {
        "label": "Grafo",
        "kind": 6,
        "importPath": "Codigo.grafo",
        "description": "Codigo.grafo",
        "peekOfCode": "class Grafo:\n    def __init__(self, direcionado: bool):\n        self.vertices = []        # Lista de vértices no grafo\n        self.arestas = []         # Lista de arestas no grafo\n        self.direcionado = direcionado  # Determina se o grafo é direcionado\n    def adicionar_vertice(self, rotulo: str, peso: int = 0):\n        \"\"\"Adiciona um vértice ao grafo.\"\"\"\n        vertice = Vertice(rotulo, peso)\n        self.vertices.append(vertice)\n        return vertice",
        "detail": "Codigo.grafo",
        "documentation": {}
    },
    {
        "label": "encontrar_pontes_naive",
        "kind": 2,
        "importPath": "Codigo.grafo",
        "description": "Codigo.grafo",
        "peekOfCode": "def encontrar_pontes_naive(self):\n    \"\"\"\n    Identifica e retorna as arestas que são pontes no grafo.\n    \"\"\"\n    def contar_componentes():\n        \"\"\"\n        Conta o número de componentes conectados no grafo.\n        \"\"\"\n        visited = set()\n        componentes = 0",
        "detail": "Codigo.grafo",
        "documentation": {}
    },
    {
        "label": "adicionar_arestas_aleatorias",
        "kind": 2,
        "importPath": "Codigo.grafo",
        "description": "Codigo.grafo",
        "peekOfCode": "def adicionar_arestas_aleatorias(grafo, num_arestas):\n    \"\"\"\n    Adiciona um número especificado de arestas aleatórias ao grafo.\n    Evita duplicatas, loops e arestas antibase.\n    Parâmetros:\n        grafo: Instância de Grafo.\n        num_arestas: Número de arestas a serem adicionadas.\n    \"\"\"\n    if len(grafo.vertices) < 2:\n        print(\"Erro: É necessário pelo menos dois vértices no grafo.\")",
        "detail": "Codigo.grafo",
        "documentation": {}
    },
    {
        "label": "mostrar_menu",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def mostrar_menu():\n    print(\"\\nMenu de Opções:\")\n    print(\"0. Carregar grafo a partir de arquivo JSON\")\n    print(\"1. Carregar grafo a partir de arquivo CSV\")\n    print(\"2. Criar grafo aleatório baseado em seu número de vértices\")\n    print(\"3. Adicionar vértice\")\n    print(\"4. Adicionar aresta\")\n    print(\"5. Exibir grafo\")\n    print(\"6. Alterar vértice\")\n    print(\"7. Alterar aresta\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "criar_vertices_iniciais",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def criar_vertices_iniciais(grafo):\n    try:\n        num_vertices = int(input(\"Quantos vértices deseja criar? \"))\n        if num_vertices < 1:\n            print(\"Erro: o número de vértices deve ser pelo menos 1.\")\n            return\n        for i in range(num_vertices):\n            rotulo = f\"V{i+1}\"\n            peso_str = input(f\"Digite o peso para o vértice {rotulo} (ou deixe em branco para padrão 0): \")\n            peso = int(peso_str) if peso_str else 0",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "adicionar_vertice_ao_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def adicionar_vertice_ao_grafo(grafo: Grafo):\n    rotulo = input(\"Digite o rótulo do vértice: \")\n    peso_str = input(\n        \"Digite o peso do vértice (ou deixe em branco para padrão 0): \")\n    peso = int(peso_str) if peso_str else 0\n    grafo.adicionar_vertice(rotulo, peso)\n    print(f\"Vértice {rotulo} adicionado com sucesso.\")\n    input(\"Pressione Enter para continuar...\")\ndef adicionar_aresta_ao_grafo(grafo: Grafo):\n    if len(grafo.vertices) < 2:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "adicionar_aresta_ao_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def adicionar_aresta_ao_grafo(grafo: Grafo):\n    if len(grafo.vertices) < 2:\n        print(\"Erro: é necessário ter pelo menos dois vértices para adicionar uma aresta.\")\n        return\n    rotulo = input(\"Digite o rótulo da aresta: \")\n    peso_str = input(\n        \"Digite o peso da aresta (ou deixe em branco para padrão 0): \")\n    peso = int(peso_str) if peso_str else 0\n    try:\n        print(\"\\nEscolha o primeiro vértice:\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "alterar_vertice_do_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def alterar_vertice_do_grafo(grafo: Grafo):\n    listar_vertices(grafo.vertices)\n    try:\n        idx = int(input(\"Digite o índice do vértice que deseja alterar: \"))\n        vertice = grafo.vertices[idx]\n        novo_rotulo = input(f\"Digite o novo rótulo para o vértice {vertice.rotulo}: \")\n        novo_peso_str = input(f\"Digite o novo peso para o vértice {vertice.rotulo} (ou deixe em branco para manter o peso atual {vertice.peso}): \")\n        novo_peso = int(novo_peso_str) if novo_peso_str else vertice.peso\n        grafo.alterar_vertice(vertice, novo_rotulo, novo_peso)\n        print(f\"Vértice {vertice.rotulo} atualizado com sucesso.\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "alterar_aresta_do_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def alterar_aresta_do_grafo(grafo: Grafo):\n    listar_arestas(grafo.arestas)\n    try:\n        idx = int(input(\"Digite o índice da aresta que deseja alterar: \"))\n        aresta = grafo.arestas[idx]\n        novo_rotulo = input(\n            f\"Digite o novo rótulo para a aresta {aresta.rotulo}: \")\n        novo_peso_str = input(f\"Digite o novo peso para a aresta {aresta.rotulo} (ou deixe em branco para manter o peso atual {aresta.peso}): \")\n        novo_peso = int(novo_peso_str) if novo_peso_str else aresta.peso\n        grafo.alterar_aresta(aresta, novo_rotulo, novo_peso)",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "deletar_vertice_do_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def deletar_vertice_do_grafo(grafo: Grafo):\n    listar_vertices(grafo.vertices)\n    try:\n        idx = int(input(\"Digite o índice do vértice que deseja deletar: \"))\n        vertice = grafo.vertices[idx]\n        grafo.remover_vertice(vertice)\n        print(\n            f\"Vértice {vertice.rotulo} e suas arestas foram deletados com sucesso.\")\n    except (ValueError, IndexError):\n        print(\"Erro: índice inválido ou entrada incorreta.\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "deletar_aresta_do_grafo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def deletar_aresta_do_grafo(grafo: Grafo):\n    listar_arestas(grafo.arestas)\n    try:\n        idx = int(input(\"Digite o índice da aresta que deseja deletar: \"))\n        aresta = grafo.arestas[idx]\n        grafo.remover_aresta(aresta)\n        print(f\"Aresta {aresta.rotulo} foi deletada com sucesso.\")\n    except (ValueError, IndexError):\n        print(\"Erro: índice inválido ou entrada incorreta.\")\n    input(\"Pressione Enter para continuar...\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "checar_adjacencia_vertices",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def checar_adjacencia_vertices(grafo: Grafo):\n    listar_vertices(grafo.vertices)\n    try:\n        idx1 = int(input(\"Digite o índice do primeiro vértice: \"))\n        idx2 = int(input(\"Digite o índice do segundo vértice: \"))\n        adjacente = grafo.checar_adjacencia_vertices(\n            grafo.vertices[idx1], grafo.vertices[idx2])\n        if adjacente:\n            print(f\"Os vértices {grafo.vertices[idx1].rotulo} e {grafo.vertices[idx2].rotulo} são adjacentes.\")\n        else:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "checar_adjacencia_arestas",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def checar_adjacencia_arestas(grafo: Grafo):\n    listar_arestas(grafo.arestas)\n    try:\n        idx1 = int(input(\"Digite o índice da primeira aresta: \"))\n        idx2 = int(input(\"Digite o índice da segunda aresta: \"))\n        adjacente = grafo.checar_adjacencia_arestas(\n            grafo.arestas[idx1], grafo.arestas[idx2])\n        if adjacente:\n            print(f\"As arestas {grafo.arestas[idx1].rotulo} e {grafo.arestas[idx2].rotulo} são adjacentes.\")\n        else:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "checar_existencia_arestas",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def checar_existencia_arestas(grafo: Grafo):\n    print(grafo.checar_arestas())\n    input(\"Pressione Enter para continuar...\")\ndef checar_vertices_arestas(grafo: Grafo):\n    print(grafo.verificar_arestas())\n    input(\"Pressione Enter para continuar...\")\n# Checagem de existencia de articulaões\ndef checar_articulacoes(grafo: Grafo):\n    print(grafo.checar_articulacoes())\n    input(\"Pressione Enter para continuar...\")",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "checar_vertices_arestas",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def checar_vertices_arestas(grafo: Grafo):\n    print(grafo.verificar_arestas())\n    input(\"Pressione Enter para continuar...\")\n# Checagem de existencia de articulaões\ndef checar_articulacoes(grafo: Grafo):\n    print(grafo.checar_articulacoes())\n    input(\"Pressione Enter para continuar...\")\ndef grafo_vazio_completo(grafo: Grafo):\n    # Exibe o rótulo de cada vértice para uma visualização mais clara\n    print(grafo.checar_grafo())",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "checar_articulacoes",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def checar_articulacoes(grafo: Grafo):\n    print(grafo.checar_articulacoes())\n    input(\"Pressione Enter para continuar...\")\ndef grafo_vazio_completo(grafo: Grafo):\n    # Exibe o rótulo de cada vértice para uma visualização mais clara\n    print(grafo.checar_grafo())\n    input(\"Pressione Enter para continuar...\")\ndef exibir_matriz_adj(grafo: Grafo):\n    \"\"\"Exibe o grafo em forma de matriz de adjacencia\"\"\"\n    if(grafo.direcionado is False):",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "grafo_vazio_completo",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def grafo_vazio_completo(grafo: Grafo):\n    # Exibe o rótulo de cada vértice para uma visualização mais clara\n    print(grafo.checar_grafo())\n    input(\"Pressione Enter para continuar...\")\ndef exibir_matriz_adj(grafo: Grafo):\n    \"\"\"Exibe o grafo em forma de matriz de adjacencia\"\"\"\n    if(grafo.direcionado is False):\n        matrizND = grafo.exibir_matriz_adjacenciaND()\n        string = '  '\n        for v in grafo.vertices:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "exibir_matriz_adj",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def exibir_matriz_adj(grafo: Grafo):\n    \"\"\"Exibe o grafo em forma de matriz de adjacencia\"\"\"\n    if(grafo.direcionado is False):\n        matrizND = grafo.exibir_matriz_adjacenciaND()\n        string = '  '\n        for v in grafo.vertices:\n            string = string + v.rotulo + ' '\n        print(string)\n        for e, row in enumerate(matrizND):\n            print(grafo.vertices[e].rotulo + \" \" + \" \".join(map(str, row)))",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "exibir_matriz_inci",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def exibir_matriz_inci(grafo: Grafo):\n    \"\"\"Exibe a matriz de incidencia do grafo\"\"\"\n    if(grafo.direcionado is False):\n        matrizND = grafo.exibir_matriz_incidenciaND()\n        string = '  '\n        for v in grafo.arestas:\n            string = string + v.rotulo + ' '\n        print(string)\n        for e, row in enumerate(matrizND):\n            print(grafo.vertices[e].rotulo + \" \" + \" \".join(map(str, row)))",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "verificar_conectividade",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def verificar_conectividade(grafo: Grafo):\n    print(grafo.verificar_conectividade())\n    input(\"Pressione Enter para continuar...\")\ndef verificar_conectividade_naive(grafo: Grafo):\n    print(grafo.verificar_conectividade_naive())\ndef exibir_lista_adjacencia(grafo: Grafo):\n    \"\"\"Exibe a lista de adjacência do grafo, considerando se ele é direcionado ou não.\"\"\"\n    lista_adjacencia = {}\n    for vertice in grafo.vertices:\n        lista_adjacencia[vertice.rotulo] = []",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "verificar_conectividade_naive",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def verificar_conectividade_naive(grafo: Grafo):\n    print(grafo.verificar_conectividade_naive())\ndef exibir_lista_adjacencia(grafo: Grafo):\n    \"\"\"Exibe a lista de adjacência do grafo, considerando se ele é direcionado ou não.\"\"\"\n    lista_adjacencia = {}\n    for vertice in grafo.vertices:\n        lista_adjacencia[vertice.rotulo] = []\n    for aresta in grafo.arestas:\n        origem, destino = aresta.vertices\n        # Adicionar adjacência para grafos direcionados e não direcionados",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "exibir_lista_adjacencia",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def exibir_lista_adjacencia(grafo: Grafo):\n    \"\"\"Exibe a lista de adjacência do grafo, considerando se ele é direcionado ou não.\"\"\"\n    lista_adjacencia = {}\n    for vertice in grafo.vertices:\n        lista_adjacencia[vertice.rotulo] = []\n    for aresta in grafo.arestas:\n        origem, destino = aresta.vertices\n        # Adicionar adjacência para grafos direcionados e não direcionados\n        lista_adjacencia[origem.rotulo].append(destino.rotulo)\n        if not grafo.direcionado:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "verificar_componentes_fortemente_conexos",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def verificar_componentes_fortemente_conexos(grafo: Grafo):\n    componentes = kosaraju(grafo)\n    print(\"Componentes fortemente conectados:\")\n    for i, componente in enumerate(componentes):\n        print(f\"Componente {i + 1}: {[vertice.rotulo for vertice in componente]}\")\ndef carregar_grafo_json(nome_arquivo: str) -> Grafo:\n    try:\n        with open(nome_arquivo, 'r') as f:\n            dados = json.load(f)\n        grafo = Grafo(direcionado=dados[\"direcionado\"])",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "carregar_grafo_json",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def carregar_grafo_json(nome_arquivo: str) -> Grafo:\n    try:\n        with open(nome_arquivo, 'r') as f:\n            dados = json.load(f)\n        grafo = Grafo(direcionado=dados[\"direcionado\"])\n        vertices = {}\n        for vertice_data in dados[\"vertices\"]:\n            vertice = grafo.adicionar_vertice(vertice_data[\"rotulo\"], vertice_data[\"peso\"])\n            vertices[vertice_data[\"rotulo\"]] = vertice\n        for aresta_data in dados[\"arestas\"]:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "salvar_grafo_json",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def salvar_grafo_json(grafo, nome_arquivo):\n    grafo_dict = {\n        \"vertices\": [{\"rotulo\": v.rotulo, \"peso\": v.peso} for v in grafo.vertices],\n        \"arestas\": [{\"rotulo\": a.rotulo, \"peso\": a.peso, \"origem\": a.vertices[0].rotulo, \"destino\": a.vertices[1].rotulo} for a in grafo.arestas],\n        \"direcionado\": grafo.direcionado\n    }\n    with open(nome_arquivo, 'w') as f:\n        json.dump(grafo_dict, f, indent=4)\ndef executar_fleury(grafo: Grafo):\n    \"\"\"",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "executar_fleury",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def executar_fleury(grafo: Grafo):\n    \"\"\"\n    Executa o algoritmo de Fleury em um grafo e salva o resultado em um arquivo com nome incremental.\n    Parâmetros:\n        grafo: Instância de Grafo.\n    \"\"\"\n    if not grafo:\n        print(\"Erro: Nenhum grafo carregado ou criado. Crie ou carregue um grafo primeiro.\")\n        return\n    if grafo.direcionado:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "executar_fleury_tarjan",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def executar_fleury_tarjan(grafo: Grafo):\n    \"\"\"\n    Executa o algoritmo de Fleury usando Tarjan para detectar pontes e salva o resultado em um arquivo.\n    Parâmetros:\n        grafo: Instância de Grafo.\n    \"\"\"\n    if not grafo:\n        print(\"Erro: Nenhum grafo carregado ou criado. Crie ou carregue um grafo primeiro.\")\n        return\n    if grafo.direcionado:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "ajustar_grafo_grau_2",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def ajustar_grafo_grau_2(grafo):\n    \"\"\"\n    Ajusta um grafo para que todos os vértices tenham grau 2, conectando \n    vértices sequencialmente (1 com 2, 2 com 3, ...).\n    Parâmetros:\n        grafo: Instância de Grafo.\n    \"\"\"\n    if len(grafo.vertices) < 2:\n        print(\"Erro: O grafo deve ter pelo menos dois vértices.\")\n        return",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "exportar_csv",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def exportar_csv(grafo: Grafo):\n    nome = input('Insira o nome do arquivo (ex: \"Grafo1\"):')\n    grafo.gerar_csv(nome, grafo.direcionado)\ndef ler_from_csv(grafo: Grafo):\n    grafo.ler_grafo_from_csv()\ndef main():\n    grafo = None  # Inicializar a variável do grafo\n    while True:\n        opcao = mostrar_menu()\n        match opcao:",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "ler_from_csv",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def ler_from_csv(grafo: Grafo):\n    grafo.ler_grafo_from_csv()\ndef main():\n    grafo = None  # Inicializar a variável do grafo\n    while True:\n        opcao = mostrar_menu()\n        match opcao:\n            case '0': \n                nome_arquivo = input(\"Digite o nome do arquivo JSON (ex: grafo.json): \")\n                grafo = carregar_grafo_json(nome_arquivo) ",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Codigo.main",
        "description": "Codigo.main",
        "peekOfCode": "def main():\n    grafo = None  # Inicializar a variável do grafo\n    while True:\n        opcao = mostrar_menu()\n        match opcao:\n            case '0': \n                nome_arquivo = input(\"Digite o nome do arquivo JSON (ex: grafo.json): \")\n                grafo = carregar_grafo_json(nome_arquivo) \n            case '1': \n                direcionado = input(\"O grafo é direcionado? (s/n): \").strip().lower() == 's'",
        "detail": "Codigo.main",
        "documentation": {}
    },
    {
        "label": "carregar_grafo_json",
        "kind": 2,
        "importPath": "Codigo.tempCodeRunnerFile",
        "description": "Codigo.tempCodeRunnerFile",
        "peekOfCode": "def carregar_grafo_json(nome_arquivo: str) -> Grafo:\n#     try:\n#         with open(nome_arquivo, 'r') as f:\n#             dados = json.load(f)\n#         grafo = Grafo(direcionado=dados[\"direcionado\"])\n#         vertices = {}\n#         for vertice_data in dados[\"vertices\"]:\n#             vertice = grafo.adicionar_vertice(vertice_data[\"rotulo\"], vertice_data[\"peso\"])\n#             vertices[vertice_data[\"rotulo\"]] = vertice\n#         for aresta_data in dados[\"arestas\"]:",
        "detail": "Codigo.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "Vertice",
        "kind": 6,
        "importPath": "Codigo.vertice",
        "description": "Codigo.vertice",
        "peekOfCode": "class Vertice:\n    def __init__(self, rotulo: str, peso: int):\n        self.rotulo = rotulo      # Identificador do vértice (rótulo)\n        self.peso = peso          # Peso do vértice\n        self.arestas = []         # Lista de arestas conectadas a este vértice\n    def adicionar_aresta(self, aresta):\n        self.arestas.append(aresta)\n    def __str__(self):\n        return f\"Vértice {self.rotulo} (Peso: {self.peso})\"\ndef listar_vertices(vertices):",
        "detail": "Codigo.vertice",
        "documentation": {}
    },
    {
        "label": "listar_vertices",
        "kind": 2,
        "importPath": "Codigo.vertice",
        "description": "Codigo.vertice",
        "peekOfCode": "def listar_vertices(vertices):\n    \"\"\"Função para exibir todos os vértices disponíveis com índices.\"\"\"\n    for i, vertice in enumerate(vertices):\n        print(f\"{i}: {vertice}\")\ndef alterar_vertice(vertices):\n    \"\"\"Permite alterar o rótulo e o peso de um vértice selecionado.\"\"\"\n    listar_vertices(vertices)\n    try:\n        idx = int(input(\"Digite o índice do vértice que deseja alterar: \"))\n        vertice = vertices[idx]",
        "detail": "Codigo.vertice",
        "documentation": {}
    },
    {
        "label": "alterar_vertice",
        "kind": 2,
        "importPath": "Codigo.vertice",
        "description": "Codigo.vertice",
        "peekOfCode": "def alterar_vertice(vertices):\n    \"\"\"Permite alterar o rótulo e o peso de um vértice selecionado.\"\"\"\n    listar_vertices(vertices)\n    try:\n        idx = int(input(\"Digite o índice do vértice que deseja alterar: \"))\n        vertice = vertices[idx]\n        novo_rotulo = input(f\"Novo rótulo para o vértice {vertice.rotulo} (deixe vazio para manter): \")\n        if novo_rotulo:\n            vertice.rotulo = novo_rotulo\n        novo_peso = input(f\"Novo peso para o vértice {vertice.peso} (deixe vazio para manter): \")",
        "detail": "Codigo.vertice",
        "documentation": {}
    }
]